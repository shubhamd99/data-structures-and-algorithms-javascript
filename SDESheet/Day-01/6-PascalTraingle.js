// Question 1
// Problem Link - https://leetcode.com/problems/pascals-triangle/
// Sol - https://dev.to/alisabaj/solving-pascal-s-triangle-in-javascript-4e59

// Given an integer numRows, return the first numRows of Pascal's triangle.
// In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

// Input: numRows = 5
// Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]

// Input: numRows = 1
// Output: [[1]]

/**
 * @param {number} numRows
 * @return {number[][]}
 */
// Time Complexity - O(n^2)
// Space Complexity - O(N^2)
var generate = function(numRows) {
    //  if the number of rows in the triangle is 0, then we can automatically return an empty array
    if (numRows === 0) return [];
    // If the number of rows is 1, then we can return a two-dimensional array with one row and one column, [[1]].
    if (numRows === 1) return [[1]];

    let result = [];

    // The outer for loop will account for each row, so it'll increment from 1 until it equals numRows
    for (let row = 1; row <= numRows; row++) {
        let arr = [];

        for (let col = 0; col < row; col++) {
            // Inside the inner for loop, we want to check if we're in the first or last column
            if (col === 0 || col === row - 1) {
                arr.push(1);
            } else {
                // Finally, for all of the other columns, we want to push the sum of two values to arr
                // The first value is the element in the array that's one column to the left, and two rows up
                // The second value is the element in the array that's in the same column, and two rows up

                // The reason we're checking for the element that's two rows up is that,
                // we start incrementing the outer for loop at 1, but the result array is 0-indexed
                arr.push(
                    (result[row-2][col-1] + result[row-2][col])
                );
            }
        }

        result.push(arr);
    }

    return result;
};

// Iteration 1
// [1]

// Iteration 2
// [1, 1]

// Iteration 3
// [1, 1+1, 1] = [1,2,1]

// Iteration 4
// [1, 1+2, 2+1, 1] = [1,3,3,1]

// Iteration 5
// [1, 1+3, 3+3, 3+1, 1] = [1,4,6,4,1]

console.log(generate(5)); // [ [ 1 ], [ 1, 1 ], [ 1, 2, 1 ], [ 1, 3, 3, 1 ], [ 1, 4, 6, 4, 1 ] ]
console.log(generate(1)); // [ [1] ]


// Find the Nth row in Pascal’s Triangle
// Problem Link - https://www.geeksforgeeks.org/find-the-nth-row-in-pascals-triangle/

// Pascal’s Triangle: 
// 1 
// 1 1 
// 1 2 1 
// 1 3 3 1 
// 1 4 6 4 1 

// Input: N = 3 
// Output: 1, 3, 3, 1 
// Explanation: 
// The elements in the 3rd row are 1 3 3 1.

// Time Complexity: O(N) 
// Auxiliary Space: O(1)

//  4C0 = 1
//  4C3 = 4x3/2x1 = 6

// we will just generate only the numbers of the Nth row
// We can observe that the Nth row of the Pascals triangle consists of following sequence
// NC0, NC1, ......, NCN - 1, NCN

// Since, NC0 = 1, the following values of the sequence can be generated by the following equation:
// NCr = (NCr - 1 * (N - r + 1)) / r where 1 ≤ r ≤ N

/**
 * @param {number} rowIndex
 * @return {number[]}
 */
var getRow = function(rowIndex) {
    let result = [];
    let prev = 1;

    result.push(prev);
    
    for (let row = 1; row <= rowIndex; row++) {
        let curr = (prev * (rowIndex - row + 1))/ row;
        result.push(curr);
        prev = curr;
    }
    
    return result;
};

console.log(getRow(5)); // [ 1, 5, 10, 10, 5, 1 ]